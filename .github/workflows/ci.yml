name: UAV Assessment (C++) CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  LOCAL_IMAGE: uav-assessment-env:ci
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/uav-assessment-cpp-env

jobs:
  sim-tests:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          buildkitd-flags: --debug

      - name: üê≥ Build image (load for tests)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.LOCAL_IMAGE }}
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üîß Make scripts executable
        run: |
          chmod +x run_sitl.sh run_mavros.sh || true
          chmod +x src/uav_tests_cpp/tests/run_e2e.sh || true
          mkdir -p .ci_artifacts

      # ---------- MAVROS smoke ----------
      - name: üß™ MAVROS smoke
        id: smoke
        shell: bash
        continue-on-error: true
        run: |
          set -eo pipefail
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -eo pipefail
            source /opt/ros/humble/setup.bash

            ./run_sitl.sh &
            sleep 5
            nohup ./run_mavros.sh 14557 > /tmp/mavros_smoke.log 2>&1 &

            ok=0
            for i in $(seq 1 60); do
              source /opt/ros/humble/setup.bash
              if ros2 topic list 2>/dev/null | grep -q "/mavros/state"; then ok=1; break; fi
              sleep 0.5
            done

            mkdir -p .ci_artifacts
            cp /tmp/sitl_e2e.log      .ci_artifacts/smoke_sitl.log   2>/dev/null || true
            cp /tmp/sitl.log          .ci_artifacts/smoke_sitl.log   2>/dev/null || true
            cp /tmp/mavros_smoke.log  .ci_artifacts/smoke_mavros.log 2>/dev/null || true

            if [ "$ok" -eq 1 ]; then echo pass > .ci_artifacts/smoke.status; else echo fail > .ci_artifacts/smoke.status; fi

            pkill -f px4_sitl_default 2>/dev/null || true
            pkill -f gzserver 2>/dev/null || true
            pkill -f gzclient 2>/dev/null || true
            pkill -f mavros_node 2>/dev/null || true
          '
          echo "status=$(cat .ci_artifacts/smoke.status || echo unknown)" >> "$GITHUB_OUTPUT"

      # ---------- Build ----------
      - name: üß± Build (colcon)
        id: build_cpp
        shell: bash
        run: |
          set -eo pipefail
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -eo pipefail
            source /opt/ros/humble/setup.bash
            colcon build --symlink-install --packages-up-to uav_tests_cpp
          '

      # ---------- Task 1 ----------
      - name: ‚ñ∂Ô∏è Task 1 ‚Äì Arm/Disarm (direct gtest)
        id: task1
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p .ci_artifacts
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -euo pipefail
            source /opt/ros/humble/setup.bash
            source install/setup.bash

            BIN="build/uav_tests_cpp/test_task1_arm_disarm"
            if [ ! -x "$BIN" ]; then
              echo skip > .ci_artifacts/task1.status
              exit 0
            fi

            # GTest FAIL etse bile devam edip status yazabilelim
            set +e
            REPO_ROOT=/ws ./src/uav_tests_cpp/tests/run_e2e.sh "$BIN" 2>&1 | tee .ci_artifacts/task1_gtest.log
            code=${PIPESTATUS[0]}
            set -e

            if [ "$code" -ne 0 ]; then
              status=fail
            elif grep -F -q "[  SKIPPED ]" .ci_artifacts/task1_gtest.log; then
              status=skip
            else
              status=pass
            fi
            echo "$status" > .ci_artifacts/task1.status

            # Loglarƒ± topla (varsa)
            cp /tmp/sitl_e2e.log   .ci_artifacts/task1_sitl.log   2>/dev/null || true
            cp /tmp/mavros_e2e.log .ci_artifacts/task1_mavros.log 2>/dev/null || true
          ' || true
          echo "status=$(cat .ci_artifacts/task1.status || echo unknown)" >> "$GITHUB_OUTPUT"

      # ---------- Task 2 ----------
      - name: ‚ñ∂Ô∏è Task 2 ‚Äì Takeoff/Land (direct gtest)
        id: task2
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p .ci_artifacts
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -euo pipefail
            source /opt/ros/humble/setup.bash
            source install/setup.bash

            BIN="build/uav_tests_cpp/test_task2_takeoff_land"
            if [ ! -x "$BIN" ]; then
              echo skip > .ci_artifacts/task2.status
              exit 0
            fi

            set +e
            REPO_ROOT=/ws ./src/uav_tests_cpp/tests/run_e2e.sh "$BIN" 2>&1 | tee .ci_artifacts/task2_gtest.log
            code=${PIPESTATUS[0]}
            set -e

            if [ "$code" -ne 0 ]; then
              status=fail
            elif grep -F -q "[  SKIPPED ]" .ci_artifacts/task2_gtest.log; then
              status=skip
            else
              status=pass
            fi
            echo "$status" > .ci_artifacts/task2.status

            cp /tmp/sitl_e2e.log   .ci_artifacts/task2_sitl.log   2>/dev/null || true
            cp /tmp/mavros_e2e.log .ci_artifacts/task2_mavros.log 2>/dev/null || true
          ' || true
          echo "status=$(cat .ci_artifacts/task2.status || echo unknown)" >> "$GITHUB_OUTPUT"


      - name: üìé Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: .ci_artifacts
          if-no-files-found: warn
          retention-days: 7

      # ---------- GHCR push (PR hari√ß) ----------
      - name: üîê Login to GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Publish image to GHCR
        id: ghcr_push
        if: ${{ github.event_name != 'pull_request' }}
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.GHCR_IMAGE }}:latest
            ${{ env.GHCR_IMAGE }}:${{ github.sha }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- Summary ----------
      - name: üìù Summary
        if: always()
        shell: bash
        run: |
          badge3 () {
            case "$2" in
              pass) echo "![${1}](https://img.shields.io/badge/${1// /%20}-PASSED-brightgreen)";;
              fail) echo "![${1}](https://img.shields.io/badge/${1// /%20}-FAILED-red)";;
              skip) echo "![${1}](https://img.shields.io/badge/${1// /%20}-SKIPPED-orange)";;
              *)    echo "![${1}](https://img.shields.io/badge/${1// /%20}-UNKNOWN-lightgrey)";;
            esac
          }
          {
            echo "## üõ©Ô∏è UAV Assessment (C++)"
            echo
            echo "$(badge3 "MAVROS smoke" "${{ steps.smoke.outputs.status || 'unknown' }}")"
            echo "$(badge3 "Task 1"       "${{ steps.task1.outputs.status  || 'unknown' }}")"
            echo "$(badge3 "Task 2"       "${{ steps.task2.outputs.status  || 'unknown' }}")"
            echo
            echo "### üêã Docker (GHCR)"
            echo "- Push: **${{ steps.ghcr_push.outcome || 'skipped' }}**"
            echo
            echo '```bash'
            echo "docker pull ${{ env.GHCR_IMAGE }}:latest"
            echo "docker pull ${{ env.GHCR_IMAGE }}:${{ github.sha }}"
            echo "docker run -it --rm ${{ env.GHCR_IMAGE }}:latest bash"
            echo '```'
            echo
            echo "<details><summary>üßæ MAVROS smoke ‚Äì log tail</summary>"
            echo
            echo '```text'
            [ -f .ci_artifacts/smoke_sitl.log ]   && tail -n 80 .ci_artifacts/smoke_sitl.log   || echo "(no smoke_sitl.log)"
            [ -f .ci_artifacts/smoke_mavros.log ] && tail -n 60 .ci_artifacts/smoke_mavros.log || echo "(no smoke_mavros.log)"
            echo '```'
            echo "</details>"
            echo
            echo "<details><summary>üìÑ Task 1 ‚Äì log tail</summary>"
            echo
            echo '```text'
            [ -f .ci_artifacts/task1_sitl.log ]   && tail -n 120 .ci_artifacts/task1_sitl.log   || echo "(no task1_sitl.log)"
            [ -f .ci_artifacts/task1_mavros.log ] && tail -n  80 .ci_artifacts/task1_mavros.log || echo "(no task1_mavros.log)"
            echo '```'
            echo "</details>"
            echo
            echo "<details><summary>üìÑ Task 2 ‚Äì log tail</summary>"
            echo
            echo '```text'
            [ -f .ci_artifacts/task2_sitl.log ]   && tail -n 120 .ci_artifacts/task2_sitl.log   || echo "(no task2_sitl.log)"
            [ -f .ci_artifacts/task2_mavros.log ] && tail -n  80 .ci_artifacts/task2_mavros.log || echo "(no task2_mavros.log)"
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---------- Fail job only if a task failed ----------
      - name: ‚ùå Fail job if any task failed
        if: ${{ always() && (steps.task1.outputs.status == 'fail' || steps.task2.outputs.status == 'fail') }}
        run: exit 1
