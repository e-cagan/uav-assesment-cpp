name: UAV Assessment CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  LOCAL_IMAGE: uav-assessment-env:ci
  # Repo'ya √∂zg√º isim: paket otomatik bu repoya linklenir
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/uav-assessment-cpp-env

jobs:
  sim-tests:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          buildkitd-flags: --debug

      - name: üê≥ Build image (load for tests)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.LOCAL_IMAGE }}
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üîß Make scripts executable
        run: |
          chmod +x run_sitl.sh run_mavros.sh
          chmod +x src/uav_tests_cpp/tests/run_e2e.sh || true

      # ---------- MAVROS smoke ----------
      - name: üß™ MAVROS smoke
        id: mavros_smoke
        shell: bash
        continue-on-error: true
        run: |
          set -o pipefail
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -eo pipefail
            mkdir -p /ws/.ci_artifacts
            source /opt/ros/humble/setup.bash

            ./run_sitl.sh &
            sleep 5
            nohup ./run_mavros.sh 14557 > /tmp/mavros.log 2>&1 &

            ok=0
            for i in $(seq 1 40); do
              source /opt/ros/humble/setup.bash
              if ros2 topic list 2>/dev/null | grep -q "/mavros/state"; then ok=1; break; fi
              sleep 0.5
            done

            cp /tmp/sitl.log  .ci_artifacts/smoke_sitl.log  2>/dev/null || true
            cp /tmp/mavros.log .ci_artifacts/smoke_mavros.log 2>/dev/null || true

            exit $([ "$ok" -eq 1 ] && echo 0 || echo 1)
          '
          echo "rc=$?" >> "$GITHUB_OUTPUT"

      # ---------- Build ----------
      - name: üß± Build (colcon)
        id: build_cpp
        shell: bash
        continue-on-error: true
        run: |
          set -o pipefail
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -eo pipefail
            source /opt/ros/humble/setup.bash
            colcon build --symlink-install --packages-up-to uav_tests_cpp
          '
          echo "rc=$?" >> "$GITHUB_OUTPUT"

      # ---------- Task 1 ----------
      - name: ‚ñ∂Ô∏è Task 1 ‚Äì Arm/Disarm
        id: task1
        shell: bash
        continue-on-error: true
        run: |
          set -o pipefail
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -eo pipefail
            source /opt/ros/humble/setup.bash
            source install/setup.bash

            ctest --test-dir build/uav_tests_cpp \
                  -R ^task1_arm_disarm$ -VV --output-on-failure --no-tests=error
            rc=$?

            mkdir -p .ci_artifacts
            cp /tmp/sitl_e2e.log   .ci_artifacts/task1_sitl.log   2>/dev/null || true
            cp /tmp/mavros_e2e.log .ci_artifacts/task1_mavros.log 2>/dev/null || true

            exit $rc
          '
          echo "rc=$?" >> "$GITHUB_OUTPUT"

      # ---------- Task 2 ----------
      - name: ‚ñ∂Ô∏è Task 2 ‚Äì Takeoff/Land
        id: task2
        shell: bash
        continue-on-error: true
        run: |
          set -o pipefail
          docker run --rm -t -v "$PWD":/ws -w /ws ${{ env.LOCAL_IMAGE }} bash -lc '
            set -eo pipefail
            source /opt/ros/humble/setup.bash
            source install/setup.bash

            ctest --test-dir build/uav_tests_cpp \
                  -R ^task2_takeoff_land$ -VV --output-on-failure --no-tests=error
            rc=$?

            mkdir -p .ci_artifacts
            cp /tmp/sitl_e2e.log   .ci_artifacts/task2_sitl.log   2>/dev/null || true
            cp /tmp/mavros_e2e.log .ci_artifacts/task2_mavros.log 2>/dev/null || true

            exit $rc
          '
          echo "rc=$?" >> "$GITHUB_OUTPUT"

      - name: üìé Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: .ci_artifacts

      # ---------- GHCR push (PR hari√ß her durumda dene) ----------
      - name: üîê Login to GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Publish image to GHCR
        id: ghcr_push
        if: ${{ github.event_name != 'pull_request' }}
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.GHCR_IMAGE }}:latest
            ${{ env.GHCR_IMAGE }}:${{ github.sha }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- Summary (renkli rozetler) ----------
      - name: üìù Summary
        if: always()
        shell: bash
        run: |
          badge () {
            # $1 label, $2 rc (0/!=0)
            if [ "$2" -eq 0 ]; then
              echo "![${1}](https://img.shields.io/badge/${1// /%20}-SUCCESS-brightgreen)"
            else
              echo "![${1}](https://img.shields.io/badge/${1// /%20}-FAILURE-red)"
            fi
          }
          {
            echo "## üõ©Ô∏è UAV Assessment (C++)"
            echo
            echo "$(badge "MAVROS smoke"  ${{ steps.mavros_smoke.outputs.rc || 1 }})"
            echo "$(badge "Task 1"        ${{ steps.task1.outputs.rc       || 1 }})"
            echo "$(badge "Task 2"        ${{ steps.task2.outputs.rc       || 1 }})"
            echo
            echo "### üêã Docker (GHCR)"
            echo "- Push denemesi: **${{ steps.ghcr_push.outcome || 'skipped' }}**"
            echo
            echo '```bash'
            echo "docker pull ${{ env.GHCR_IMAGE }}:latest"
            echo "docker pull ${{ env.GHCR_IMAGE }}:${{ github.sha }}"
            echo "docker run -it --rm ${{ env.GHCR_IMAGE }}:latest bash"
            echo '```'
            echo
            echo "<details><summary>üßæ MAVROS smoke ‚Äì log tail</summary>"
            echo
            echo '```text'
            [ -f .ci_artifacts/smoke_mavros.log ] && tail -n 80 .ci_artifacts/smoke_mavros.log || echo "(no smoke_mavros.log)"
            echo '```'
            echo "</details>"
            echo
            echo "<details><summary>üìÑ Task 1 ‚Äì SITL/MAVROS log tail</summary>"
            echo
            echo '```text'
            [ -f .ci_artifacts/task1_sitl.log ]   && tail -n 100 .ci_artifacts/task1_sitl.log   || echo "(no task1_sitl.log)"
            [ -f .ci_artifacts/task1_mavros.log ] && tail -n  80 .ci_artifacts/task1_mavros.log || echo "(no task1_mavros.log)"
            echo '```'
            echo "</details>"
            echo
            echo "<details><summary>üìÑ Task 2 ‚Äì SITL/MAVROS log tail</summary>"
            echo
            echo '```text'
            [ -f .ci_artifacts/task2_sitl.log ]   && tail -n 100 .ci_artifacts/task2_sitl.log   || echo "(no task2_sitl.log)"
            [ -f .ci_artifacts/task2_mavros.log ] && tail -n  80 .ci_artifacts/task2_mavros.log || echo "(no task2_mavros.log)"
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"
